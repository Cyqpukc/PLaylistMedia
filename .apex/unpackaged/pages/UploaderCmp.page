<apex:page cache="false" docType="html-5.0" showHeader="false" sidebar="false" standardStyleSheets="false">
  <apex:slds />
  <apex:includeScript value="{!URLFOR($Resource.Components_Library, '/vendor/components/jquery/jquery.min.js')}"/>
  <apex:includeScript value="{!URLFOR($Resource.Components_Library, '/js/forcetk.js')}"/>
  <div class="slds-scope">
       <div id="uploaderButton" class="slds-form-element">
            <div class="slds-form-element__control">
                <div class="slds-group-container">
                    <div class="slds-file-selector slds-file-selector--files">
                        <input type="file" class="slds-file-selector__input slds-assistive-text" id="file" aria-describedby="file-selector-id" multiple="true" webkitdirectory="" />
                        <label class="slds-file-selector__body" for="file">
                            <span class="slds-file-selector__button slds-button slds-button--neutral uiButton--brand">
                                UPLOAD FILES
                            </span>
                        </label>
                    </div>
                    <div class="slds-progress-bar" id="fileProgress">
                        <div class="status">
                            <span class="key"></span>&nbsp;&nbsp;&nbsp;
                            <span class="percent"></span>
                        </div>
                    </div>
                    <div id="message"></div>
                </div>
            </div>
        </div>
  </div>
  <script type="text/javascript">
      forcetk.Client.prototype.blob = function (path, fields, filename, payloadField, payload, callback, error, retry) {
       'use strict';   
       
       var UploadFile = fields.UploadFile;
       
       delete fields.UploadFile;
               
       var that = this,
           url = (this.visualforce ? '' : this.instanceUrl) + '/services/data' + path,
           boundary = randomString(),
           blob = new Blob([
               "--boundary_" + boundary + '\n'
               + "Content-Disposition: form-data; name=\"entity_content\";" + "\n"
               + "Content-Type: application/json" + "\n\n"
               + JSON.stringify(fields)
               + "\n\n"
               + "--boundary_" + boundary + "\n"
               + "Content-Type: application/octet-stream" + "\n"
               + "Content-Disposition: form-data; name=\"" + payloadField
               + "\"; filename=\"" + filename + "\"\n\n",
               payload,
               "\n\n"
               + "--boundary_" + boundary + "--"
           ], {type : 'multipart/form-data; boundary=\"boundary_' + boundary + '\"'}),
           request = new XMLHttpRequest();
    
       request.open("POST", (this.proxyUrl !== null && !this.visualforce) ? this.proxyUrl : url, this.asyncAjax);
       request.setRequestHeader('Accept', 'application/json');
       request.setRequestHeader('Content-Encoding', 'gzip');
       request.setRequestHeader(this.authzHeader, "Bearer " + this.sessionId);
       request.setRequestHeader('X-User-Agent', 'salesforce-toolkit-rest-javascript/' + this.apiVersion);
       request.setRequestHeader('Content-Type', 'multipart/form-data; boundary=\"boundary_' + boundary + '\"');
       if (this.proxyUrl !== null && !this.visualforce) {
           request.setRequestHeader('SalesforceProxy-Endpoint', url);
       }
       if (this.asyncAjax) {
           request.onreadystatechange = function () {
               // continue if the process is completed
               if (request.readyState === 4) {
                   // continue only if HTTP status is good
                   if (request.status >= 200 && request.status < 300) {
                       // retrieve the response
                       callback(request.response ? JSON.parse(request.response) : null);
                   } else if (request.status === 401 && !retry) {
                       that.refreshAccessToken(function (oauthResponse) {
                           that.setSessionToken(oauthResponse.access_token, null, oauthResponse.instance_url);
                           that.blob(path, fields, filename, payloadField, payload, callback, error, true);
                       }, error);
                   } else {
                       // return status message
                       error(request, request.statusText, request.response);
                   }
               }
           };
           request.upload.onprogress = function (event) {
               document.querySelector('.slds-progress-bar .status .key').innerHTML = '(' + (UploadFile.count-UploadFile.it) + '/' + UploadFile.count + ') ' + UploadFile.name;
               document.querySelector('.slds-progress-bar .status .percent').innerHTML = Math.ceil(event.loaded / event.total * 100)+'%'
           };
       }
       request.send(blob);
       return this.asyncAjax ? null : JSON.parse(request.response);
    };
    (function () {
        document.getElementById('file').addEventListener('change', function () {
            
            var client = new forcetk.Client();
            client.setSessionToken('{!$Api.Session_ID}');
            client.instanceUrl = 'https://17spring-dev-ed--c.na35.visual.force.com';
            client.proxyUrl = null;
            client.visualforce = false;
        
            var $this = this;
            var uploadFile = function (i) {
                if(i < 0) return;
                var file = $this.files[i];
                
                file.count = $this.files.length;
                file.it = i;
                
                client.createBlob('ContentVersion',{
                    Origin: 'H',
                    PathOnClient: file.name,
                    UploadFile: file,
                    Description: 'custom'
                }, file.name, 'VersionData', file, function(response){
                    console.log(response);
                    uploadFile(--i);
                }, function(request, status, response){
                    console.log(response);
                }); 
            };
            uploadFile($this.files.length-1);
        });
    })();
  </script>
</apex:page>