<apex:page cache="false" docType="html-5.0" showHeader="false" sidebar="false" standardStyleSheets="false" action="{!init}" Controller="MediaUploaderCtrl">

    <style>

        .circular-bar {
            float: right;
            height: 45px;
            width: 45px;
        }
        .arcs .outer-circle {
            fill: #e3e4e9;
            stroke: #e3e4e9;
            stroke-width: 0;
        }
        .arcs .outer-arc {
            fill: #54698d;
            stroke: #54698d;
            stroke-width: 0;
        }
        .arcs .inner-circle {
            fill: #fff;
            stroke: #e3e4e9;
            stroke-fill: 0;
        }
        .arcs .inner-arc {
            fill: none;
            stroke: #54698d;
            stroke-width: 0;
        }
        .circles {
            display: none;
        }
        .circles .outer-circle {
            fill: #54698d;
            stroke: #54698d;
            stroke-width: 0;
        }
        .circles .inner-circle {
            fill: #fff;
            stroke: #54698d;
            stroke-width: 0;
        }
        .circles.empty-circles .outer-circle {
            fill: #e3e4e9;
            stroke: #e3e4e9;
        }
        .circles.empty-circles .inner-circle {
            stroke: #e3e4e9;
        }
        #percentage-label {
            fill: #54698d;
            text-anchor: middle;
            font-size: 170%;

        }
        a,a:hover,a:focus,a:active{
            color: #2574a9;
            text-decoration:none;
        }
        .slds-button {
            position: relative;
            display: inline-block;
            padding: 0;
            background: transparent;
            background-clip: border-box;
            border: 1px solid transparent;
            border-radius: .25rem;
            font-size: .875rem;
            line-height: 1.875rem;
            text-decoration: none;
            color: #2574a9;
            -webkit-appearance: none;
            white-space: normal;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-transition: color .05s linear,background-color .05s linear;
            transition: color .05s linear,background-color .05s linear;
        }
        .slds-button--neutral {
            padding-left: 1rem;
            padding-right: 1rem;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #d4d4d4;
            background-color: rgb(255, 255, 255);
            cursor:pointer;
        }
        .slds-button:hover, .slds-button:focus, .slds-button:active, .slds-button:visited {text-decoration:none}
        .slds-button:hover, .slds-button:focus {color:#135f90}
        .slds-button--neutral {padding-left:1rem; padding-right:1rem; text-align:center; vertical-align:middle; border:1px solid #d4d4d4; background-color:rgb(255, 255, 255)}
        .slds-button--neutral:hover, .slds-button--neutral:focus {background-color:rgba(25, 124, 190, 0.1)}
        .slds-button--neutral:active {background-color:rgb(238, 241, 246)}
        .slds-button--neutral[disabled] {background-color:rgb(255, 255, 255); cursor:default}

        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        body * {
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }
        .form_upload,
        .btn_upload,
        .preview {
            font-family: sans-serif  !important;
            font-size: 14px;
        }
        .form_upload {
            position: relative;
        }
        .btn_upload {
            width: 125px;
            margin-top: 12px;
            display: none;
        }
        .btn_upload.hidden {
            display: none;
        }
        .input_hidden {
            visibility: hidden;
            position: absolute;
            left: 0;
            top: 0;
            width: 1px;
            height: 1px;
        }
        .preview {
            padding: 10px;
            margin: 5px;
            outline: solid 1px #ddd;
            color: #333;
            display: none;
        }
        .preview.active {display: block; }
        .preview:after,
        .preview:before {
            content: " ";
            visibility: hidden;
            display: table;
            height: 1%;
            clear: both;
        }
        .preview__col {
            min-height: 70px;
        }
        .preview__col.left {
            text-align: left;
            float: left;
            width: 65%;
        }
        .preview__col.right {
            float: right;
            width: 60px;
            text-align: center;
        }
        .title {
            font-weight: bold;
            line-height: 1.6;
            font-size: 15px;
        }
        .info {
            line-height: 1.6;
            /*white-space: nowrap;*/
            text-overflow: ellipsis;
            overflow: hidden;
            display: block;
        }
        .size {
            color: #aaa;
            font-size: 14px;
            line-height: 1.4;
            text-transform: uppercase;
        }
        .link_abort {
            margin-top: 10px;
            line-height: 20px;
            display: block;
        }
        #sent_ok{
            display: none;
            margin-top: 28px;
        }
        .error_icon{
            display: none;
            margin-top: 10px;
            width: 30px;
            margin: auto;
        }
        .error_icon img{
            width: 100%;
        }
        .warning_icon{
            margin-top: 33px;
            width: 30px;
        }
        .warning_icon img{
            width: 100%;
        }
        .warning__col {
            min-height: 70px;
        }
        .warning__col.right {
            text-align: left;
            float: left;
            width: 80%;
            margin-left: 10px;
        }
        .warning__col.left {
            float: left;
            width: 30px;
            text-align: center;
        }
        .hidden,.hide{
        display: none !important;
        }
        .active{
            display: block !important;
        }
    </style>
    <apex:includeScript value="{!URLFOR($Resource.Components_Library, '/vendor/components/jquery/jquery.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.Components_Library, '/vendor/components/svg4everybody.min.js')}"/>

    <apex:stylesheet value="/resource/ViewTracCustomCss"/>
    <!-- <apex:outputPanel rendered="{! customCss != null}">
        <apex:stylesheet value="{!URLFOR($Resource[customCss])}"/>
    </apex:outputPanel> -->

    <script>svg4everybody(); // run it now or whenever you are ready</script>
    <form class="form_upload" id="uploadForm1" action="{!JSENCODE(urlForUpload)}&OrgID={!orgId}" method="POST" enctype="multipart/form-data">
        <div class="form-item">
            <input type="file" name="files[]" id="myFileInput" class="input_hidden"/>

            <apex:outputPanel rendered="{!NOT(isUploadMediaAccessible)}">
                <div class="warning__col left">
                    <div class="warning_icon">
                        <img src="{!$Resource.Components_Library + '/img/warning.png'}" />
                    </div>
                </div>
                <div class="warning__col right">
                    <div class="warning__head title">You don't have needed permissions to create new Media. Please contact your system administrator</div>
                </div>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!isUploadMediaAccessible}">
                <label for="myFileInput" id="btn_upload" class="btn_upload slds-button--neutral slds-button active">{!$Label.Upload}</label>
                <div id="preview_upload" class="preview">
                    <div class="preview__col left">
                        <div class="preview__head title" id="preview01head">{!$Label.Uploading}</div>
                        <div id="file_info" class="preview__body info"></div>
                        <div id="file_size" class="preview__foot size"></div>
                    </div>
                    <div class="preview__col right loader">
                        <div id="loader01" class="loader__img circular-bar slds-x-small-show-only" data-progress="60" style="width:45px;height:45px;float: right;">
                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
                                <g class="arcs">
                                    <circle cx="50" cy="50" r="49" class="outer-circle" />
                                    <path d="M50 1 A 49 49, 0, 1, 1, 7.06 73.61, L 50 50 z" d-mask="M50 1 A 49 49, 0, 1, 1, 7.06 73.61, L 50 50 z" class="outer-arc" id="arc1" />
                                    <circle cx="50" cy="50" r="38" class="inner-circle"  />
                                    <path d="M50 15 A 35 35, 0, 1, 1, 19.33 66.86" d-mask="M50 15 A 35 35, 0, 1, 1, 19.33 66.86" class="inner-arc" id="arc2" />
                                </g>
                                <g class="circles">
                                    <circle cx="50" cy="50" r="49" class="outer-circle" />
                                    <circle cx="50" cy="50" r="38" class="inner-circle" />
                                </g>
                                <text x="50" y="58" id="percentage-label"></text>
                            </svg>
                        </div>
                        <div id="error_icon" class="error_icon">
                            <img src="{!$Resource.Components_Library + '/img/warning.png'}" />
                        </div>
                        <a href="javascript:void(0);" id="ajax_abort" class="link link_abort">{!$Label.Cancel}</a>
                        <a href="javascript:void(0);" id="sent_ok" class="link">{!$Label.Ok}</a>
                    </div>
                </div>
            </apex:outputPanel>
        </div>
    </form>

    <script>
        function getRelativeCoords(percentage) {
            var exprBase = ( ( -percentage ) * 2 * Math.PI ) + 0.5 * Math.PI
            , coordX = Math.cos(exprBase)
            , coordY = -Math.sin(exprBase)
            ;
            return [coordX, coordY];
        }
        function getArcCoords(initCoords, radius, percentage) {
            var relativeCoords = getRelativeCoords(percentage)
            , coordX = Math.round((relativeCoords[0] * radius + initCoords[0]) * 100) / 100
            , coordY = Math.round((relativeCoords[1] * radius + initCoords[1]) * 100) / 100
            ;
            return [coordX, coordY];
        }
        var progressBarInit = function (val) {

            var percentage = val / 100
            , coordsArc1 = getArcCoords([50, 50], 49, percentage)
            , coordsArc2 = getArcCoords([50, 50], 35, percentage)
            , humanPercentage = Math.round(percentage * 100)
            , revertArc = humanPercentage > 50 ? '1' : '0'
            , path1Str = $('#arc1').attr('d-mask').split(',')
            , path2Str = $('#arc2').attr('d-mask').split(',')
            , useArcs = humanPercentage > 0 && humanPercentage < 100
            , arcs = $('.arcs')
            , circles = $('.circles')
            ;

            arcs.toggle(useArcs);
            circles.toggle(!useArcs);
            if (useArcs) {
                path2Str[2] = path1Str[2] = revertArc;
                path1Str[4] = coordsArc1.join(' ');
                path2Str[4] = coordsArc2.join(' ');
                $('#arc1').attr('d', path1Str.join(','));
                $('#arc2').attr('d', path2Str.join(','));
                $('#arc1').attr('d-mask', path1Str.join(','));
                $('#arc2').attr('d-mask', path2Str.join(','));
            } else {
                var elClass = circles.attr('class');
                if (humanPercentage && ~elClass.indexOf('empty-circles')) {
                    circles.attr('class', elClass.replace(' empty-circles', ''));
                } else if (!humanPercentage && !~elClass.indexOf('empty-circles')) {
                    circles.attr('class', elClass + ' empty-circles');
                }
            }
            $('#percentage-label').text(val  + '%');
        }
    </script>


    <script>
    function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    };
    var pDomain;
    try {
        pDomain = window.parent.location.href;
    } catch (e) {
        console.log(e.message);
        console.log('Try to get alternative domain');
        pDomain = decodeURIComponent(getUrlParameter('originalDomain'));
    }
    //  console.log(pDomain);

    window.parent.postMessage(JSON.stringify({'onload':"1"}), pDomain);
        var myOrgId = '{!orgId}';
        var salesforceOrganizationId = 'OrgID='+myOrgId;
        var uploadLink = '{!JSENCODE(urlForUpload)}'+'&'+salesforceOrganizationId;
        var parseFileLink = '{!JSENCODE(urlForGetStatus)}'+'&'+salesforceOrganizationId;
        var progressLink = '{!JSENCODE(urlForGetProgress)}'+'&'+salesforceOrganizationId;
        var uploaderId = '{!guid}';
    </script>

    <script>
        var loaderUi = document.getElementById("preview_upload");
        var uploadBtnUi = document.getElementById("btn_upload");
        var fileInfoUi = document.getElementById("file_info");
        var fileSizeUi = document.getElementById("file_size");
        var ajaxAbortUi = document.getElementById("ajax_abort");

        var FileUploader = function (chunkSize, uploaderId) {
            this.uploaderId = uploaderId;
            this.chunkSize = chunkSize;
            this.chunk = { start: 0, end: this.chunkSize};
        };
        FileUploader.prototype.submit = function (blob, url, method, onprogress, complete, onerror) {
            var $this = this;

            var formData = new FormData();
            var reader = new FileReader();

            formData.append('files', new Blob([blob.slice($this.chunk.start, $this.chunk.end+1)], {type : blob.type}), encodeURIComponent(blob.name));

            var xhr = new XMLHttpRequest();
            xhr.open(method, url, true);

            if(blob.size > this.chunkSize) {
                xhr.setRequestHeader('Content-Disposition','attachment; filename="'+encodeURIComponent(blob.name)+'"');
                xhr.setRequestHeader('Content-Range','bytes '+$this.chunk.start+'-'+$this.chunk.end+'/'+blob.size);
            };

            xhr.upload.onprogress = function (event) {
                onprogress({loaded:$this.chunk.start + event.loaded, size:blob.size});
            };

            xhr.onerror = function () {
                document.getElementById('error_icon').classList.add('active');
                document.getElementById('loader01').classList.add('hide');
            };

            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    $this.chunk.start = $this.chunk.end+1;
                    $this.chunk.end = $this.chunk.start + $this.chunkSize;
                    if($this.chunk.end >= blob.size) {
                        $this.chunk.end -= ($this.chunk.end - blob.size)+1;
                    }
                    if($this.chunk.start < blob.size) {
                        $this.submit(blob, url, method, onprogress, complete, onerror);
                    }else{
                        complete(xhr.responseText);
                    }
                }else{
                    onerror(xhr);
                }
            };

            xhr.send(formData, {binary: true, mask: true});

            return xhr;
        };
        FileUploader.prototype.getPassedStatus = function (url, orgId, complete) {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.onerror = function () {
                console.dir(xhr);
                console.log('getPassedStatus ');
                document.getElementById('error_icon').classList.add('active');
                document.getElementById('loader01').classList.add('hide');
            };
            xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded; charset=UTF-8');
            xhr.setRequestHeader('Accept','*/*');
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var result = JSON.parse(xhr.responseText);
                    if(result.TotalCount > 0) {
                        complete(result);
                    }
                }
            }
            xhr.send('uploadId='+this.uploaderId+'&OrgId='+orgId+'&callbackUrl=');
        }

        FileUploader.prototype.parsingFile = function (url, courseTitle, uploadIndex, fileSize, orgId, complete) {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.onerror = function () {
                document.getElementById('error_icon').classList.add('active');
                document.getElementById('loader01').classList.add('hide');
            };
            xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded; charset=UTF-8');
            xhr.setRequestHeader('Accept','*/*');
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var result = JSON.parse(xhr.responseText);
                    console.log(result);
                    console.log(result.Status);
                    result.Status
                    if(result.Status == 0) {
                        complete(result);
                    }else{
                        console.dir(xhr);
                        document.getElementById('error_icon').classList.add('active');
                        document.getElementById('loader01').classList.add('hide');
                    }
                }
            }
            xhr.send('UploadId='+this.uploaderId+'&OrgId='+orgId+'&CourseTitle='+encodeURIComponent(courseTitle)+'&UploadIndex='+uploadIndex+'&Size='+fileSize);
        }

        FileUploader.prototype.getParsingProgress = function (url, uploadIndex, waitFunc, parseChild, complete) {
            var $this = this;
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded; charset=UTF-8');
            xhr.setRequestHeader('Accept','*/*');
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var result = JSON.parse(xhr.responseText);
                    if(result.Status == 2) {
                        if(result.ChildParsingResults.length == 0){
                            complete(result);
                        }else{
                            parseChild(result);
                        }
                    }else if(result.Status == 1) {
                        waitFunc(result);
                        setTimeout(function () {
                             $this.getParsingProgress(url, uploadIndex, waitFunc, parseChild, complete);
                        }, 1000);
                    }else if(result.Status == 3) {
                        console.dir(result);
                        document.getElementById('error_icon').classList.add('active');
                        document.getElementById('loader01').classList.add('hide');
                    }
                }
            }
            xhr.send('UploadId='+this.uploaderId+'&UploadIndex='+uploadIndex);
        };

        FileUploader.prototype.waitConvertingComplete = function (url, uploadedData, waitFunc, complete) {
            var $this = this;
            var file = uploadedData.CanConvert[0];
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded; charset=UTF-8');
            xhr.setRequestHeader('Accept','*/*');
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var result = JSON.parse(xhr.responseText);
                    if (result.Status != 'Finish') {
                        setTimeout(function () {
                            $this.waitConvertingComplete(url, uploadedData, waitFunc, complete);
                        }, 1000);
                    }else{
                        complete(result);
                    }
                    waitFunc(result);
                }
            }
            xhr.send('uploadId='+$this.uploaderId+'&filename='+encodeURIComponent(file.FileName));
        }

        jQuery(function($){
                progressBarInit(0);
        });
        window.onload = function () {
            var loader01 = document.getElementById('loader01');
            var form = document.getElementById('uploadForm1');
            var onload = 0;
            var onProgressConvert = function (result) {
                var val = parseFloat(result.Progress) * 0.3;
                console.log(result);
                progressBarInit((onload+val).toFixed(0));
                //window.parent.postMessage(JSON.stringify({'convert':val.toFixed(0)}), window.parent.location.href);
            };
            var onProgressUpload = function (result) {
                var val = onload = 0;
                if(result.size > 0 ){
                    val = onload = (result.loaded / result.size) * 0.7 * 100;
                }
                console.log(val);
                progressBarInit(val.toFixed(0));
                //window.parent.postMessage(JSON.stringify({'upload':val.toFixed(0)}), window.parent.location.href);
            };
            var onErrorUpload = function (xhr) {
            console.dir(xhr);
                if(xhr.status == 500){
                     document.getElementById('error_icon').classList.add('active');
                     document.getElementById('loader01').classList.add('hide');
                }
            };
            var onErrorConvert = function (){
            console.log('error onErrorConvert ');
                     document.getElementById('error_icon').classList.add('active');
                     document.getElementById('loader01').classList.add('hide');
            };
            form.querySelector('#myFileInput').addEventListener('change', function (evt) {

                evt.preventDefault();
                var files = form.querySelector('input[type=file]').files;
                var index = 0;

                // get file info:
                fileInfoUi.innerHTML = files[0].name;
                fileSizeUi.innerHTML = (files[0].size <= 1000000) ? (files[0].size/1000).toFixed(2)+" kb" : (files[0].size/1000000).toFixed(2)+" mb";

                // class manipulation here:
                loaderUi.classList.add('active');
                window.parent.postMessage(JSON.stringify({'upload':"1"}), pDomain);

                uploadBtnUi.classList.remove('active');

                var sender = function (file, key) {
                    document.getElementById('preview01head').innerHTML = '{!$Label.Uploading}';
                    document.getElementById('loader01').classList.remove('hidden');

                    var fileUploader = new FileUploader(1048576*10, uploaderId);

                    var parseChild = function (result) {
                        console.log(result);
                        console.dir(result);
                        for(var i=0; i<result.ChildParsingResults.length; i++){
                            var itRes = result.ChildParsingResults[i];
                            if(itRes.Status == 4){
                                (function (it) {
                                    fileUploader.parsingFile(parseFileLink, itRes.CourseName, it, 0, myOrgId, function (res) {
                                        fileUploader.getParsingProgress(progressLink, it, onProgressConvert, parseChild, function (result) {
                                            remote();
                                        });
                                    });
                                })(i+1);
                            }
                        }
                    };

                    var remote = function () {
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.MediaUploaderCtrl.getCoursesFromBackend}',
                            uploaderId,
                            function(result, event) {
                                console.dir(result);
                                console.log('success');
                                if(key == files.length-1){
                                    document.getElementById('preview01head').innerHTML = '{!$Label.Upload_Completed}';
                                    progressBarInit(100);
                                    setTimeout(function(){
                                        document.getElementById('loader01').classList.add('hidden');
                                    },1000);
                                    document.getElementById('ajax_abort').classList.add('hidden');
                                    document.getElementById('sent_ok').classList.add('active');
                                    document.getElementById('sent_ok').addEventListener('click', function(){
                                        window.parent.postMessage(JSON.stringify({'result':result}),pDomain);
                                    });
                                }
                            },
                            { buffer: false, escape: true, timeout: 30000 }
                        );
                    };

                    var request = fileUploader.submit(file, uploadLink, 'POST', onProgressUpload, function (data) {
                        fileUploader.parsingFile(parseFileLink, file.name, 1, file.size, myOrgId, function (res) {
                            console.log('start progress');
                            fileUploader.getParsingProgress(progressLink, 1,  onProgressConvert, parseChild,  function (result) {
                                remote();
                            });
                            if(index < files.length-1){
                                sender(files[++index], index);
                            }
                        });
                    }, onErrorUpload);

                    document.getElementById('ajax_abort').addEventListener('click', function () {
                        console.log('uploading aborted.');
                        request.abort();

                        document.getElementById('error_icon').classList.remove('active');
                        document.getElementById('loader01').classList.remove('hide');
                        window.parent.postMessage(JSON.stringify({'upload':"1"}), pDomain);

                        uploadBtnUi.classList.add('active');
                        loaderUi.classList.remove('active');

                        document.location.reload(true) || window.location.reload(true);
                    });
                };
                sender(files[index], index);
            });

            try {
                /*
                if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
                    document.getElementById("myFileInput").accept = "*";
                } else if(/Safari/.test(navigator.userAgent)) {
                    document.getElementById("myFileInput").accept = "*";
                } else {
                    console.log('all bro');
                    document.getElementById("myFileInput").accept = "audio/*,video/*";
                }
                */

                if (/Mac|iPad|iPhone|iPod/.test(navigator.platform)) {
                    document.getElementById("myFileInput").accept = "*";
                } else {
                    document.getElementById("myFileInput").accept = "audio/*,video/*,video/3gpp,video/3gpp2,audio/3gpp,video/mpeg,video/x-flv,application/x-shockwave-flash,application/vnd.rn-realmedia,application/mxf,.mkv,.ac3,.mxf,.rm,.swf,.flv,.mpg,.pdf,image/*,image/jpeg,image/png,image/gif,.h5p";
                }
            } catch(err) {
                console.log(err.message);
            }
        };

    </script>
</apex:page>